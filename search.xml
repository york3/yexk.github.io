<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[PHP常用的函数]]></title>
      <url>/20170816/php-common-function/</url>
      <content type="html"><![CDATA[<h3 id="1-去掉UTF8-BOM-头"><a href="#1-去掉UTF8-BOM-头" class="headerlink" title="1. 去掉UTF8 BOM 头"></a>1. 去掉UTF8 BOM 头</h3><blockquote>
<p>通过手动去除文件里面的bom实现。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 去掉UTF8 Bom头</div><div class="line"> * Remove UTF8 Bom </div><div class="line"> * </div><div class="line"> * @param  string    $string </div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">function remove_utf8_Bom($string)</div><div class="line">&#123;</div><div class="line">    if(substr($string, 0, 3) == pack(&apos;CCC&apos;, 239, 187, 191)) return substr($string, 3);</div><div class="line">    return $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-增强substr字符截取函数（支持UTF8）"><a href="#2-增强substr字符截取函数（支持UTF8）" class="headerlink" title="2. 增强substr字符截取函数（支持UTF8）"></a>2. 增强substr字符截取函数（支持UTF8）</h3><blockquote>
<p>当你的php没有开启mb_string函数扩展的时候就需要自己手动去书写</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 增强substr方法：支持多字节语言，比如中文。</div><div class="line">    * Enhanced substr version: support multibyte languages like Chinese.</div><div class="line">    *</div><div class="line">    * @param string $string</div><div class="line">    * @param int $length </div><div class="line">    * @param string $append </div><div class="line">    * @return string </div><div class="line">    **/</div><div class="line">   function substr($string, $length, $append = &apos;&apos;)</div><div class="line">   &#123;</div><div class="line">       if (strlen($string) &lt;= $length ) $append = &apos;&apos;;</div><div class="line">       if(function_exists(&apos;mb_substr&apos;)) return mb_substr($string, 0, $length, &apos;utf-8&apos;) . $append;</div><div class="line"></div><div class="line">       preg_match_all(&quot;/./su&quot;, $string, $data);</div><div class="line">       return join(&quot;&quot;, array_slice($data[0],  0, $length)) . $append;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="3-判断是不是ajax请求"><a href="#3-判断是不是ajax请求" class="headerlink" title="3. 判断是不是ajax请求"></a>3. 判断是不是ajax请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 检查是否是AJAX请求</div><div class="line"> * Check is ajax request.</div><div class="line"> * </div><div class="line"> * @return bool</div><div class="line"> */</div><div class="line">function is_ajax()</div><div class="line">&#123;</div><div class="line">    $isAjax = isset($_SERVER[&apos;HTTP_X_REQUESTED_WITH&apos;]) &amp;&amp; $_SERVER[&apos;HTTP_X_REQUESTED_WITH&apos;] == &apos;XMLHttpRequest&apos;;</div><div class="line">    if(!$isAjax) $isAjax = (isset($_GET[&apos;HTTP_X_REQUESTED_WITH&apos;]) &amp;&amp; $_GET[&apos;HTTP_X_REQUESTED_WITH&apos;] == &apos;true&apos;);</div><div class="line">    return $isAjax;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-获取浏览器类型。"><a href="#4-获取浏览器类型。" class="headerlink" title="4. 获取浏览器类型。"></a>4. 获取浏览器类型。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取浏览器类型。</div><div class="line"> * Get browser.</div><div class="line"> *</div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">function get_browser()</div><div class="line">&#123;</div><div class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</div><div class="line"></div><div class="line">    $agent = $_SERVER[&quot;HTTP_USER_AGENT&quot;];</div><div class="line">    if(strpos($agent, &apos;MSIE&apos;) !== false || strpos($agent, &apos;rv:11.0&apos;)) </div><div class="line">    &#123;</div><div class="line">        return &quot;ie&quot;;</div><div class="line">    &#125;</div><div class="line">    else if(strpos($agent, &apos;Firefox&apos;) !== false)</div><div class="line">    &#123;</div><div class="line">        return &quot;firefox&quot;;</div><div class="line">    &#125;</div><div class="line">    else if(strpos($agent, &apos;Chrome&apos;) !== false)</div><div class="line">    &#123;</div><div class="line">        return &quot;chrome&quot;;</div><div class="line">    &#125;</div><div class="line">    else if(strpos($agent, &apos;Opera&apos;) !== false)</div><div class="line">    &#123;</div><div class="line">        return &apos;opera&apos;;</div><div class="line">    &#125;</div><div class="line">    else if((strpos($agent, &apos;Chrome&apos;) == false) &amp;&amp; strpos($agent, &apos;Safari&apos;) !== false)</div><div class="line">    &#123;</div><div class="line">        return &apos;safari&apos;;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        return &apos;unknown&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-获取浏览器版本"><a href="#5-获取浏览器版本" class="headerlink" title="5. 获取浏览器版本"></a>5. 获取浏览器版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取浏览器版本</div><div class="line"> * Get browser version. </div><div class="line"> * </div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">function get_browser_version()</div><div class="line">&#123;</div><div class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</div><div class="line"></div><div class="line">    $agent = $_SERVER[&apos;HTTP_USER_AGENT&apos;];   </div><div class="line">    if(preg_match(&apos;/MSIE\s(\d+)\..*/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else if(preg_match(&apos;/FireFox\/(\d+)\..*/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else if(preg_match(&apos;/Opera[\s|\/](\d+)\..*/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else if(preg_match(&apos;/Chrome\/(\d+)\..*/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else if((strpos($agent,&apos;Chrome&apos;) == false) &amp;&amp; preg_match(&apos;/Safari\/(\d+)\..*$/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else if(preg_match(&apos;/rv:(\d+)\..*/i&apos;, $agent, $regs))</div><div class="line">    &#123;</div><div class="line">        return $regs[1];</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        return &apos;unknow&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-获取客服端的操作系统"><a href="#6-获取客服端的操作系统" class="headerlink" title="6. 获取客服端的操作系统"></a>6. 获取客服端的操作系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取客户端操作系统</div><div class="line"> * Get client os from agent info. </div><div class="line"> * </div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">function get_os()</div><div class="line">&#123;</div><div class="line">    if(empty($_SERVER[&apos;HTTP_USER_AGENT&apos;])) return &apos;unknow&apos;;</div><div class="line"></div><div class="line">    $osList = array(</div><div class="line">        &apos;/windows nt 10/i&apos;      =&gt;  &apos;Windows 10&apos;,</div><div class="line">        &apos;/windows nt 6.3/i&apos;     =&gt;  &apos;Windows 8.1&apos;,</div><div class="line">        &apos;/windows nt 6.2/i&apos;     =&gt;  &apos;Windows 8&apos;,</div><div class="line">        &apos;/windows nt 6.1/i&apos;     =&gt;  &apos;Windows 7&apos;,</div><div class="line">        &apos;/windows nt 6.0/i&apos;     =&gt;  &apos;Windows Vista&apos;,</div><div class="line">        &apos;/windows nt 5.2/i&apos;     =&gt;  &apos;Windows Server 2003/XP x64&apos;,</div><div class="line">        &apos;/windows nt 5.1/i&apos;     =&gt;  &apos;Windows XP&apos;,</div><div class="line">        &apos;/windows xp/i&apos;         =&gt;  &apos;Windows XP&apos;,</div><div class="line">        &apos;/windows nt 5.0/i&apos;     =&gt;  &apos;Windows 2000&apos;,</div><div class="line">        &apos;/windows me/i&apos;         =&gt;  &apos;Windows ME&apos;,</div><div class="line">        &apos;/win98/i&apos;              =&gt;  &apos;Windows 98&apos;,</div><div class="line">        &apos;/win95/i&apos;              =&gt;  &apos;Windows 95&apos;,</div><div class="line">        &apos;/win16/i&apos;              =&gt;  &apos;Windows 3.11&apos;,</div><div class="line">        &apos;/macintosh|mac os x/i&apos; =&gt;  &apos;Mac OS X&apos;,</div><div class="line">        &apos;/mac_powerpc/i&apos;        =&gt;  &apos;Mac OS 9&apos;,</div><div class="line">        &apos;/linux/i&apos;              =&gt;  &apos;Linux&apos;,</div><div class="line">        &apos;/ubuntu/i&apos;             =&gt;  &apos;Ubuntu&apos;,</div><div class="line">        &apos;/iphone/i&apos;             =&gt;  &apos;iPhone&apos;,</div><div class="line">        &apos;/ipod/i&apos;               =&gt;  &apos;iPod&apos;,</div><div class="line">        &apos;/ipad/i&apos;               =&gt;  &apos;iPad&apos;,</div><div class="line">        &apos;/android/i&apos;            =&gt;  &apos;Android&apos;,</div><div class="line">        &apos;/blackberry/i&apos;         =&gt;  &apos;BlackBerry&apos;,</div><div class="line">        &apos;/webos/i&apos;              =&gt;  &apos;Mobile&apos;</div><div class="line">    );</div><div class="line"></div><div class="line">    foreach ($osList as $regex =&gt; $value)</div><div class="line">    &#123; </div><div class="line">        if(preg_match($regex, $_SERVER[&apos;HTTP_USER_AGENT&apos;])) return $value; </div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    return &apos;unknown&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-检查IP是否合法"><a href="#7-检查IP是否合法" class="headerlink" title="7. 检查IP是否合法"></a>7. 检查IP是否合法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 检查IP是否合法。</div><div class="line"> * Check ip avaliable.  </div><div class="line"> * </div><div class="line"> * @param  string $ip </div><div class="line"> * @return bool</div><div class="line"> */</div><div class="line">function check_ip($ip)</div><div class="line">&#123;</div><div class="line">    $ip = trim($ip);</div><div class="line">    if(strpos($ip, &apos;/&apos;) !== false)</div><div class="line">    &#123;</div><div class="line">        $s = explode(&apos;/&apos;, $ip);</div><div class="line">        preg_match(&apos;/^(((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))&#123;3&#125;)$/&apos;, $s[0], $matches);</div><div class="line">        if(!empty($matches) and $s[1] &gt; 0 and $s[1] &lt; 36) return true;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        preg_match(&apos;/^(((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d)(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))&#123;3&#125;)$/&apos;, $ip, $matches);</div><div class="line">        if(!empty($matches)) return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-创建随机的字符串"><a href="#8-创建随机的字符串" class="headerlink" title="8. 创建随机的字符串"></a>8. 创建随机的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 创建随机的字符串。</div><div class="line"> * Create random string. </div><div class="line"> * </div><div class="line"> * @param  int    $length </div><div class="line"> * @param  string $skip A-Z|a-z|0-9</div><div class="line"> * @return void</div><div class="line"> */</div><div class="line">function create_randomStr($length, $skip = &apos;&apos;)</div><div class="line">&#123;</div><div class="line">    $str  = &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;</div><div class="line">    $skip = str_replace(&apos;A-Z&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;, $skip);</div><div class="line">    $skip = str_replace(&apos;a-z&apos;, &apos;abcdefghijklmnopqrstuvwxyz&apos;, $skip);</div><div class="line">    $skip = str_replace(&apos;0-9&apos;, &apos;0123456789&apos;, $skip);</div><div class="line">    for($i = 0; $i &lt; strlen($skip); $i++)</div><div class="line">    &#123;</div><div class="line">        $str = str_replace($skip[$i], &apos;&apos;, $str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $strlen = strlen($str);</div><div class="line">    while($length &gt; strlen($str)) $str .= $str;</div><div class="line"></div><div class="line">    $str = str_shuffle($str); </div><div class="line">    return substr($str,0,$length); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="9-mask地址类型转换"><a href="#9-mask地址类型转换" class="headerlink" title="9. mask地址类型转换"></a>9. mask地址类型转换</h3><p>mask地址的类型转换，比如255.255.255.0 =&gt; 32<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 整形转字符型</div><div class="line"> * @Author Yexk</div><div class="line"> * @Date   2017-02-10</div><div class="line"> * @param  &#123;Int&#125;      $bit [数字类型：1-32]</div><div class="line"> * @return &#123;String&#125;        [mask字符串地址]</div><div class="line"> */</div><div class="line">public static function maskbit2ip($bit)</div><div class="line">&#123;</div><div class="line">    $bit    = intval($bit);</div><div class="line">    $lan    = ((1&lt;&lt;$bit) -1)&lt;&lt;(32-$bit) ;</div><div class="line">    $lan    = str_split(&apos;&apos;.decbin($lan), 8);</div><div class="line">    $maskip = bindec($lan[0]).&apos;.&apos;.bindec($lan[1]).&apos;.&apos;.bindec($lan[2]).&apos;.&apos;.bindec($lan[3]);</div><div class="line"></div><div class="line">    return $maskip;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * mask转整形</div><div class="line"> * @Author Yexk</div><div class="line"> * @Date   2017-02-10</div><div class="line"> * @param  &#123;String&#125;   $ip [字符型:255.255.255.0]</div><div class="line"> * @return &#123;Int&#125;          [返回整形]</div><div class="line"> */</div><div class="line">public static function maskip2bit($ip)</div><div class="line">&#123;</div><div class="line">    $ips = explode(&apos;.&apos;,$ip);</div><div class="line">    if(!is_array($ips) || 4 != count($ips))&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $bit = (intval($ips[0])&lt;&lt;24) + (intval($ips[1])&lt;&lt;16) + (intval($ips[2])&lt;&lt;8) + intval($ips[3]);</div><div class="line">    $bit = decbin($bit);</div><div class="line">    $len = strlen($bit);</div><div class="line">    if(32 != $len)&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    $masklen = 0;</div><div class="line">    $flag    = &apos;1&apos;;</div><div class="line">    for($i=0; $i&lt;32; $i++)&#123;</div><div class="line">        if(&apos;1&apos;==$bit[$i])&#123;</div><div class="line">            $masklen++;</div><div class="line">            if(&apos;1&apos;!=$flag)&#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        $flag=$bit[$i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return $masklen;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> function </tag>
            
            <tag> common </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL遇到的问题]]></title>
      <url>/20170816/mysql-question/</url>
      <content type="html"><![CDATA[<h2 id="mysql5-7中datetime默认值设置0000-00-00失败的问题"><a href="#mysql5-7中datetime默认值设置0000-00-00失败的问题" class="headerlink" title="mysql5.7中datetime默认值设置0000-00-00失败的问题"></a>mysql5.7中datetime默认值设置0000-00-00失败的问题</h2><blockquote>
<p>问题：mysql5.7之后版本datetime默认值设置’0000-00-00’，出现异常：Invalid default value for ‘create_time’</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-- 例如这个表格：</div><div class="line">DROP TABLE IF EXISTS `test`;</div><div class="line">CREATE TABLE `test` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;自增ID&apos;,</div><div class="line">  `time` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos; COMMENT &apos;添加时间&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>添加的时候就会报错：<br><img src="/20170816/mysql-question/mysql_default_value.jpg" alt="mysql_default_value.jpg" title=""></p>
<p>这个时候在MySQL的配置文件的<code>[mysqld]</code>中加入：<br><code>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code><br><img src="/20170816/mysql-question/mysql_default_value_conf.jpg" alt="mysql_default_value_conf.jpg" title=""></p>
<p>最后重启再导入就行了。</p>
<blockquote>
<p>附上原文链接 <a href="http://blog.csdn.net/sd4493091/article/details/54947851" target="_blank" rel="external">http://blog.csdn.net/sd4493091/article/details/54947851</a> (此处对原文稍作修改)</p>
</blockquote>
<h2 id="MySQL解决-Err-1206-The-total-number-of-locks-exceeds-the-lock-table-size问题"><a href="#MySQL解决-Err-1206-The-total-number-of-locks-exceeds-the-lock-table-size问题" class="headerlink" title="MySQL解决[Err] 1206 - The total number of locks exceeds the lock table size问题"></a>MySQL解决[Err] 1206 - The total number of locks exceeds the lock table size问题</h2><blockquote>
<p>默认缓冲区的文件大小问题。。</p>
</blockquote>
<p>在配置文件改成一个较大的大小就行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">innodb_buffer_pool_size = 2G</div></pre></td></tr></table></figure></p>
<h2 id="mysql的蠕虫复制"><a href="#mysql的蠕虫复制" class="headerlink" title="mysql的蠕虫复制"></a>mysql的蠕虫复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into test1 (name) select name from test1;</div></pre></td></tr></table></figure>
<h1 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h1><p>在本机先使用root用户登录mysql： mysql -u root -p”youpassword” 进行授权操作：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'youpassword' WITH GRANT OPTION;</div></pre></td></tr></table></figure>
<p>重载授权表：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 常见问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LINUX PPPoE IPv6的环境搭建]]></title>
      <url>/20170815/linux-pppoe-server/</url>
      <content type="html"><![CDATA[<h2 id="设备环境："><a href="#设备环境：" class="headerlink" title="设备环境："></a>设备环境：</h2><ul>
<li>操作系统：<code>Centos 7 x64</code></li>
<li>使用软件：<code>ppp</code> ,  <code>rp-pppoe</code>,  <code>radvd</code> ,  <code>kea dhcp</code></li>
</ul>
<h2 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h2><p>这里使用的在线安装。离线安装的自己去google下安装环境</p>
<a id="more"></a>
<ol>
<li>rp-pppoe-3.11-5.el7.x86_64 </li>
<li>ppp-2.4.5-33.el7.x86_64</li>
<li>radvd-1.9.2-9.el7.x86_64</li>
</ol>
<blockquote>
<p>当时的版本</p>
</blockquote>
<p>安装命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install rp-pppoe ppp radvd</div></pre></td></tr></table></figure></p>
<h2 id="软件配置："><a href="#软件配置：" class="headerlink" title="软件配置："></a>软件配置：</h2><h3 id="PPPOE-SERVER"><a href="#PPPOE-SERVER" class="headerlink" title="PPPOE-SERVER"></a>PPPOE-SERVER</h3><p>命令 ：<code>vim /etc/ppp/options</code></p>
<blockquote>
<p>(要是这个文件没有自己创建)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Local</div><div class="line">ipv6 ,</div><div class="line"><span class="meta">#</span> 注意ipv6后面必须要隔一个空格+逗号。去掉会拨号不成功。</div></pre></td></tr></table></figure>
<p>命令：<code>vim /etc/ppp/pppoe-server-options</code></p>
<blockquote>
<p>(要是这个文件没有自己创建)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> PPP options for the PPPoE server</div><div class="line"><span class="meta">#</span> LIC: GPL</div><div class="line">require-pap</div><div class="line">require-chap</div><div class="line">login</div><div class="line">+ipv6</div><div class="line">lcp-echo-interval 10</div><div class="line">lcp-echo-failure 2</div><div class="line">logfile /var/log/pppoe.log</div></pre></td></tr></table></figure>
<p>命令： <code>vim /etc/ppp/chap-secrets</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"test" * "test" *</div><div class="line"><span class="meta">#</span> "账号" * "密码" *</div></pre></td></tr></table></figure></p>
<p><strong>启动pppoe命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pppoe-server -I enp4s0 -L 192.168.5.1 -R 192.168.5.100 -N 20</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-l ： 后面带的是你需要用作提供pppoe上网的网卡名称。<br>-L :   接你的提供服务的地址。<br>-R： 接你提供服务的地址池的起始<br>-N:   最大可拨号数量。  </p>
</blockquote>
<h3 id="RADVD"><a href="#RADVD" class="headerlink" title="RADVD"></a>RADVD</h3><p>命令：<code>vim /etc/radvd.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">interface enp4s0                #接你拨号上网的网卡名称</div><div class="line">&#123;</div><div class="line">	AdvSendAdvert on;           #启用路由器公告（RA）功能</div><div class="line">	MinRtrAdvInterval 30;       #每隔30-100秒间隔发送公告消息</div><div class="line">	MaxRtrAdvInterval 100;</div><div class="line">	AdvManagedFlag off;         # M值</div><div class="line">	AdvOtherConfigFlag on;      # O值</div><div class="line">	prefix 2020:db8:2::/64      #发送的前缀信息</div><div class="line">	&#123;</div><div class="line">		AdvOnLink on;</div><div class="line">		AdvAutonomous on;       #公告的前缀可用来自动位置配置</div><div class="line">		AdvRouterAddr off;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>启动命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radvd -C /etc/radvd.conf</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>-C</code>的c是大写</p>
</blockquote>
<h3 id="KEA-DHCP"><a href="#KEA-DHCP" class="headerlink" title="KEA DHCP"></a>KEA DHCP</h3><p>下载链接：<a href="https://www.isc.org/downloads/" target="_blank" rel="external">https://www.isc.org/downloads/</a><br>官方文档：<a href="ftp://ftp.isc.org/isc/kea/1.2.0/doc/kea-guide.html" target="_blank" rel="external">ftp://ftp.isc.org/isc/kea/1.2.0/doc/kea-guide.html</a>  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> DHCPv6 configuration starts here.</div><div class="line">"Dhcp6":</div><div class="line">&#123;</div><div class="line">    # Add names of interfaces to listen on.</div><div class="line">    "interfaces-config": &#123;</div><div class="line">    	"interfaces": ["enp4s0","*"]</div><div class="line">    &#125;,</div><div class="line">    "option-data": [ &#123;</div><div class="line">    	"name": "dns-servers",</div><div class="line">    	"data": "2001::1, 2001::2"</div><div class="line">    &#125; ],</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line"><span class="meta">#</span> The following list defines subnets. Uncomment to enable them.</div><div class="line">"subnet6": [</div><div class="line">&#123;    </div><div class="line">    "subnet": "2017:db8:2::/64",</div><div class="line">    "pools": [ &#123; "pool": "2017:db8:2::1-2017:db8:2::ffff" &#125; ],</div><div class="line">    "reservations": [</div><div class="line">        &#123;</div><div class="line">            "duid": "00:03:00:01:f4:28:54:00:15:51",</div><div class="line">            "prefixes": [ "2017::/64" ]</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    "interface":"enp4s0"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><strong>启动命令</strong>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kea-dhcp6 -c /etc/kea/kea.conf</div></pre></td></tr></table></figure></p>
<blockquote>
<p>（c是小写）,该进程不会后台进行。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pppoe server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux centos 配置更新yum源]]></title>
      <url>/20170815/linux-cenos-config/</url>
      <content type="html"><![CDATA[<p>在CentOS 7下更改yum源与更新系统。</p>
<p>[1] 首先备份/etc/yum.repos.d/CentOS-Base.repo<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>[2] 进入yum源配置文件所在文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost yum.repos.d]# cd /etc/yum.repos.d/</div></pre></td></tr></table></figure></p>
<p>[3] 下载163的yum源配置文件，放入/etc/yum.repos.d/(操作前请做好相应备份)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost yum.repos.d]# wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</div></pre></td></tr></table></figure></p>
<p>[4] 运行yum makecache生成缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost yum.repos.d]# yum makecache</div></pre></td></tr></table></figure></p>
<p>[5] 更新系统(时间比较久,主要看个人网速)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost yum.repos.d]# yum -y update</div></pre></td></tr></table></figure></p>
<blockquote>
<p>到这一步就可以更新完成了。</p>
</blockquote>
<h1 id="一、查看SELinux状态命令："><a href="#一、查看SELinux状态命令：" class="headerlink" title="一、查看SELinux状态命令："></a>一、查看SELinux状态命令：</h1><p>1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态<br>SELinux status:                 enabled<br>2、getenforce                 ##也可以用这个命令检查</p>
<h1 id="二、关闭SELinux方法："><a href="#二、关闭SELinux方法：" class="headerlink" title="二、关闭SELinux方法："></a>二、关闭SELinux方法：</h1><p>1、临时关闭（不用重启机器）：</p>
<p>复制代码代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setenforce 0 #设置SELinux 成为permissive模式</div><div class="line">#setenforce 1 设置SELinux 成为enforcing模式</div></pre></td></tr></table></figure></p>
<p>2、修改配置文件需要重启机器：<br>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启机器即可</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
            <tag> centos 7 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动画效果 (Animation)]]></title>
      <url>/20170815/css-animation/</url>
      <content type="html"><![CDATA[<h1 id="动画效果-Animation"><a href="#动画效果-Animation" class="headerlink" title="动画效果 (Animation)"></a>动画效果 (Animation)</h1><blockquote>
<p>定义一写自己喜欢的动画效果。通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>animation 属性是一个简写属性，用于设置六个动画属性：<br>animation-name （动画名称）<br>animation-duration （时间）<br>animation-timing-function （速度曲线）<br>animation-delay （延时）<br>animation-iteration-count （播放的次数）<br>animation-direction （反向播放）    </p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>animation-name</td>
<td>规定需要绑定到选择器的 keyframe 名称。。</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定完成动画所花费的时间，以秒或毫秒计。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定在动画开始之前的延迟。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>规定动画应该播放的次数。</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定是否应该轮流反向播放动画。</td>
</tr>
</tbody>
</table>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>animation: name duration timing-function delay iteration-count direction;</code>   </p>
<table>
<thead>
<tr>
<th>属性</th>
<th>name</th>
<th>duration</th>
<th>timing-function</th>
<th>delay</th>
<th>iteration-count</th>
<th>direction</th>
</tr>
</thead>
<tbody>
<tr>
<td>值</td>
<td>keyframename</td>
<td>time</td>
<td>linear</td>
<td>time</td>
<td>n</td>
<td>normal</td>
</tr>
<tr>
<td></td>
<td>none</td>
<td></td>
<td>ease</td>
<td></td>
<td>infinite</td>
<td>alternate</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>ease-in</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>ease-out</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>ease-in-out</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>ease-in-out</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>cubic-bezier(n,n,n,n)</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>简单案例</strong>：<br>css &gt;&gt;&gt;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.circle</span>&#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">	<span class="comment">/* animation */</span></div><div class="line">	<span class="attribute">animation</span>: circle <span class="number">1s</span> linear infinite alternate;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> circle &#123;</div><div class="line">	<span class="selector-tag">from</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">#00A4C1</span>; &#125;</div><div class="line">	<span class="selector-tag">to</span> &#123; <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">#00A4C1</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>html &gt;&gt;&gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"circle"</span>&gt;Yexk&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<img src="/20170815/css-animation/1_css_animate.gif" alt="1_css_animate.gif" title="">
<h3 id="1-name"><a href="#1-name" class="headerlink" title="1. name"></a>1. name</h3><p>为 @keyframes 动画规定名称。<br><strong>语法：</strong> <code>animation-name: keyframename|none;</code>    </p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>keyframename</td>
<td>规定需要绑定到选择器的 keyframe 的名称。</td>
</tr>
<tr>
<td>none</td>
<td>规定无动画效果（可用于覆盖来自级联的动画）。</td>
</tr>
</tbody>
</table>
<h3 id="2-duration"><a href="#2-duration" class="headerlink" title="2. duration"></a>2. duration</h3><p>定义动画完成一个周期所需要的时间，以秒或毫秒计。<br><strong>语法：</strong> <code>animation-duration: time;</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>time</td>
<td>规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。</td>
</tr>
</tbody>
</table>
<h3 id="3-timing-function"><a href="#3-timing-function" class="headerlink" title="3. timing-function"></a>3. timing-function</h3><p>定义动画的速度曲线。速度曲线定义动画从一套 CSS 样式变为另一套所用的时间。<br><strong>语法：</strong> <code>animation-timing-function: value;</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>cubic-bezier(n,n,n,n)</td>
<td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td>
</tr>
</tbody>
</table>
<h3 id="4-delay"><a href="#4-delay" class="headerlink" title="4. delay"></a>4. delay</h3><p>定义动画何时开始。<br><strong>语法：</strong> <code>animation-timing-function: value;</code>  </p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>time</td>
<td>可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td>
</tr>
</tbody>
</table>
<h3 id="5-iteration-count"><a href="#5-iteration-count" class="headerlink" title="5. iteration-count"></a>5. iteration-count</h3><p>定义动画的播放次数。<br><strong>语法：</strong> <code>animation-iteration-count: n|infinite;</code>   </p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>n</td>
<td>定义动画播放次数的数值。</td>
</tr>
<tr>
<td>infinite</td>
<td>规定动画应该无限次播放。</td>
</tr>
</tbody>
</table>
<h3 id="6-direction"><a href="#6-direction" class="headerlink" title="6. direction"></a>6. direction</h3><p>定义是否应该轮流反向播放动画。如果 animation-direction 值是 “alternate”，则动画会在奇数次数（1、3、5 等等）正常播放，而在偶数次数（2、4、6 等等）向后播放。  </p>
<p><strong>语法</strong> <code>animation-direction: normal|alternate;</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>默认值。动画应该正常播放。</td>
</tr>
<tr>
<td>alternate</td>
<td>动画应该轮流反向播放。</td>
</tr>
</tbody>
</table>
<p><strong>实战运用：</strong></p>
<p>参考 animate.css</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> animation </tag>
            
            <tag> css动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp - 基于流的自动化构建工具]]></title>
      <url>/20170815/gulp-get-start/</url>
      <content type="html"><![CDATA[<blockquote>
<p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；它不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。</p>
</blockquote>
<a id="more"></a>
<p><strong>安装前提：需要安装nodejs环境。</strong></p>
<p>安装gulp使用命令：<code>cnpm install -g gulp</code></p>
<blockquote>
<p>cnpm是国内镜像版的npm。<a href="../other/npm_introduction.md">什么是npm？</a></p>
</blockquote>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>初始化一个node项目。需要配置一个package.json文件放到项目的根目录。<br><img src="/20170815/gulp-get-start/node_init.png" alt="node_init.png" title=""></p>
<h3 id="本地项目安装gulp"><a href="#本地项目安装gulp" class="headerlink" title="本地项目安装gulp"></a>本地项目安装gulp</h3><p>在项目的更目录下安装gulp，执行命令：<code>cnpm install gulp --save-dev</code></p>
<blockquote>
<p>一般工具这类的东西都安装到<strong>-dev</strong>环境下。</p>
</blockquote>
<img src="/20170815/gulp-get-start/install_gulp_local.png" alt="install_gulp_local.png" title="">
<h3 id="本地安装gulp插件"><a href="#本地安装gulp插件" class="headerlink" title="本地安装gulp插件"></a>本地安装gulp插件</h3><p>这里拿编译sass的插件举例子。其他的插件也大小雷同。<br>安装命令：<code>cnpm install gulp-sass --save-dev</code><br><img src="/20170815/gulp-get-start/install_gulp_sass.png" alt="install_gulp_sass.png" title=""></p>
<blockquote>
<p><strong>安装常用插件</strong>：</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>包名</th>
</tr>
</thead>
<tbody>
<tr>
<td>sass的编译</td>
<td>gulp-sass</td>
</tr>
<tr>
<td>编译 Less</td>
<td>gulp-less</td>
</tr>
<tr>
<td>自动添加css前缀</td>
<td>gulp-autoprefixer</td>
</tr>
<tr>
<td>压缩css</td>
<td>gulp-minify-css</td>
</tr>
<tr>
<td>压缩html</td>
<td>gulp-minify-html</td>
</tr>
<tr>
<td>js代码校验</td>
<td>gulp-jshint</td>
</tr>
<tr>
<td>合并js文件</td>
<td>gulp-concat</td>
</tr>
<tr>
<td>压缩js代码</td>
<td>gulp-uglify</td>
</tr>
<tr>
<td>压缩图片</td>
<td>gulp-imagemin</td>
</tr>
<tr>
<td>自动刷新页面</td>
<td>gulp-livereload</td>
</tr>
<tr>
<td>图片缓存，只有图片替换了才压缩</td>
<td>gulp-cache</td>
</tr>
<tr>
<td>更改提醒</td>
<td>gulp-notify</td>
</tr>
<tr>
<td>清除文件</td>
<td>del</td>
</tr>
<tr>
<td>编译 Jade</td>
<td>gulp-jade</td>
</tr>
<tr>
<td>创建本地服务器</td>
<td>gulp-connect</td>
</tr>
<tr>
<td>重命名文件</td>
<td>gulp-rename</td>
</tr>
</tbody>
</table>
<h3 id="在项目的更目录创建一个gulpfile-js文件"><a href="#在项目的更目录创建一个gulpfile-js文件" class="headerlink" title="在项目的更目录创建一个gulpfile.js文件"></a>在项目的更目录创建一个gulpfile.js文件</h3><blockquote>
<p><span style="color:red">注意：</span>这个文件名字是固定的，不允许更改。</p>
</blockquote>
<p>在根目录创建文件：<code>gulpfile.js</code><br>写入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">const</span> sass_path = <span class="string">'./src/css/*.scss'</span>;</div><div class="line"><span class="comment">// 创建了一个任务，监听了scss文件，通过sass插件去编译生成css</span></div><div class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'this is sass task!'</span>);</div><div class="line">	gulp.src(sass_path)</div><div class="line">		.pipe(sass())</div><div class="line">		.pipe(gulp.dest(<span class="string">'./dist/css/'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 再创建一个gulp任务用于监听上面的任务。</span></div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'this is default task! i\'m watch sass task!'</span>);</div><div class="line">	gulp.watch(sass_path,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		gulp.run(<span class="string">'sass'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在<code>./src/css/</code>目录下创建一个文件,后缀为scss。如:<code>base.scss</code>。<br>使用sass语法写下样式文件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$gray : #ccc;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">background-color</span>: $gray;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.body</span>&#123;</div><div class="line">	<span class="attribute">color</span>: $gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动gulp任务：<br><img src="/20170815/gulp-get-start/gulp_start.png" alt="gulp_start.png" title=""></p>
<blockquote>
<p>注意：启动命令为：gulp <task名字> 。当task名字为“defualt”的时候可以省略。</task名字></p>
</blockquote>
<p>如果运行不报错可以看到自动生成了dist目录。有css/base.css文件。<br><img src="/20170815/gulp-get-start/gulp_result.png" alt="gulp_result.png" title=""></p>
<blockquote>
<p>到此gulp快速入门完成了。更多的api和教程可以查看官方的：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">gulp官网的API</a>。<br>次案例的源码：<a href="code/gulp.zip">code/gulp.zip</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 自动化工具 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery常用的方法]]></title>
      <url>/20170815/jquery-common/</url>
      <content type="html"><![CDATA[<p>一些常用的方法</p>
<a id="more"></a>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li><p><code>attr(name|properties|key,value|fn)</code> : 对元素属性的操作。（<code>prop()</code>）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>); <span class="comment">// 获取a标签的href属性值。</span></div><div class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>,<span class="string">'http://yexk.cn'</span>); <span class="comment">// 给a标签的一个属性赋值。</span></div><div class="line">$(<span class="string">'a'</span>).attr(&#123;<span class="string">'href'</span>:<span class="string">'http://yexk.cn'</span>,<span class="string">'title'</span>:<span class="string">'Yexk'</span>&#125;); <span class="comment">// 给a标签的多个属性赋值。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>removeAttr(name)</code> : 移除元素属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'a'</span>).removeAttr(<span class="string">'href'</span>); <span class="comment">// 移除一个href属性</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>addClass(class|fn)</code> ：添加一个class（类）名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></div><div class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></div><div class="line">$(<span class="string">"div"</span>).addClass(<span class="string">'show_div'</span>);</div><div class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show_div"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p><code>removeClass([class|fn])</code> : 移除元素的class（类）名。<br> 和3使用方法相同，效果相反。</p>
</li>
<li><p><code>html([val|fn])</code> : 对元素的内容进行操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).html(<span class="string">'&lt;p&gt;我是动态追加的&lt;/p&gt;'</span>); <span class="comment">// 添加内容。</span></div><div class="line">$(<span class="string">'div'</span>).html(); <span class="comment">// 获取内容 </span></div><div class="line">$(<span class="string">'div'</span>).html(<span class="string">''</span>); <span class="comment">// 删除内容</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>val([val|fn])</code> ：对元素的value值进行操作。<br> 使用方法和5相同。</p>
</li>
</ol>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>ID 选择器<ul>
<li><code>#id</code></li>
</ul>
</li>
<li>class 选择器<ul>
<li><code>.class</code></li>
</ul>
</li>
<li>属性选择器<ul>
<li><code>[attribute]</code></li>
<li><code>[attribute=value]</code> </li>
</ul>
</li>
<li>表单选择器<ul>
<li><code>:input</code></li>
<li><code>:submit</code></li>
<li><code>:selected</code></li>
</ul>
</li>
<li>层级选择器<ul>
<li><code>#id .class</code></li>
</ul>
</li>
<li>混搭使用<ul>
<li><code>#id .class input[type=&quot;text&quot;]</code></li>
</ul>
</li>
</ol>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><ol>
<li><p><code>hasClass(class)</code> ：检查当前的元素是否含有某个特定的类，如果有，则返回true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></div><div class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'show'</span>); <span class="comment">// true;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>children([expr])</code> : 获取当前对象的子集（被选中的）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// html代码 --&gt;</span></div><div class="line">&lt;ul&gt;</div><div class="line">	&lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">	&lt;li class="li_ele"&gt;2&lt;/</span>li&gt;</div><div class="line">	&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"li_ele"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div><div class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></div><div class="line">$(<span class="string">'ul'</span>).children(<span class="string">'.li_ele'</span>); <span class="comment">// 获取到了第二个和第三个li元素</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>find(expr|obj|ele)</code> : 获取当前对象的子集（被选中的）。<br> 使用方式同上    </p>
</li>
<li><code>parent([expr])</code> : 获取当前对象的父集。<br> 使用方式同上    </li>
<li><code>prev([expr])</code> ：获取当前对象的前一个。<br> 使用方式同上    </li>
<li><code>next([expr])</code> ：获取当前对象的后一个。<br> 使用方式同上    </li>
<li><code>siblings([expr])</code> : 获取当前对象的所有同级元素。<br> 使用方式同上</li>
</ol>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol>
<li><p><code>on(events,[selector],[data],fn)</code> ：在选择元素上绑定一个或多个事件的事件处理函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="comment">/* Act on the event */</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 打印div</span></div><div class="line">&#125;); <span class="comment">// 给div加上点击事件。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>off(events,[selector],[fn])</code> ：在选择元素上移除一个或多个事件的事件处理函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>).off(<span class="string">'click'</span>); <span class="comment">// 去掉div的单击事件。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>trigger(type,[data])</code> ：在每一个匹配的元素上触发某类事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'form'</span>).trigger(<span class="string">'submit'</span>); <span class="comment">// 触发表单提交事件。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>triggerHandler(type, [data])</code> ：触发指定的事件类型上所有绑定的处理函数。<br> 使用方法同上</p>
<blockquote>
<p>如果你对一个focus事件执行了 .triggerHandler() ，浏览器默认动作将不会被触发，只会触发你绑定的动作。</p>
</blockquote>
<p> ps : 这个方法的行为表现与trigger类似，但有以下三个主要区别： </p>
<ul>
<li>第一，他不会触发浏览器默认事件。</li>
<li>第二，只触发jQuery对象集合中第一个元素的事件处理函数。</li>
<li>第三，这个方法的返回的是事件处理函数的返回值，而不是据有可链性的jQuery对象。此外，如果最开始的jQuery对象集合为空，则这个方法返回 undefined。</li>
</ul>
</li>
</ol>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol>
<li><p><code>show([speed,[easing],[fn]])</code> ：显示隐藏的匹配元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// HTML 代码 --&gt;</span></div><div class="line">&lt;p style=<span class="string">"display: none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码 --&gt;</span></div><div class="line">$(<span class="string">'p'</span>).show(); <span class="comment">// 立即显示。如果想显示动画可以传时间进去。`$('P').show(1000)`</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>hide([speed,[easing],[fn]])</code> ：隐藏显示的元素。<br> 使用方法同上</p>
</li>
<li><p><code>animate(params,[speed],[easing],[fn])</code> : 用于创建自定义动画的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></div><div class="line">&lt;button id=<span class="string">"run"</span>&gt;Run&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">&lt;div id="ye_animate"&gt;Hello!&lt;/</span>div&gt;</div><div class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></div><div class="line">$(<span class="string">"#run"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"#ye_animate"</span>).animate(&#123; </div><div class="line">    width: <span class="string">"90%"</span>,</div><div class="line">    height: <span class="string">"100%"</span>,</div><div class="line">    fontSize: <span class="string">"10em"</span></div><div class="line">  &#125;, <span class="number">1000</span> );</div><div class="line">&#125;); <span class="comment">// 在一个动画中同时应用三种类型的效果。</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>stop([clearQueue],[jumpToEnd])</code> ：立即停止动画效果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设上面的已经点击了‘Run’。我们在创建一个stop按钮。</span></div><div class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></div><div class="line">&lt;button id=<span class="string">"stop"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></div><div class="line">$(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"#ye_animate"</span>).stop();</div><div class="line">&#125;); <span class="comment">// 立即停止动画。</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol>
<li><p><code>jQuery.ajax(url,[settings])</code> : 创建同步或者异步的 HTTP 请求加载远程数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	url: <span class="string">'/path/to/file'</span>, <span class="comment">// 请求的路径</span></div><div class="line">	type: <span class="string">'default GET (Other values: POST)'</span>, <span class="comment">// 请求的类型</span></div><div class="line">	dataType: <span class="string">'default: Intelligent Guess (Other values: xml, json, script, or html)'</span>, <span class="comment">// 请求头的数据类型。</span></div><div class="line">	<span class="keyword">async</span> : <span class="literal">true</span> , <span class="comment">// 同步或者异步， （默认是TRUE，异步。）</span></div><div class="line">	data: &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="comment">// 请求的参数。</span></div><div class="line">	beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 请求发送到请求返回前的时间。</span></div><div class="line">	&#125;,</div><div class="line">	success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">		<span class="comment">// 返回成功后的处理代码。</span></div><div class="line">	&#125;,</div><div class="line">	error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 请求失败后。</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p><code>jQuery.get(url, [data], [callback], [type])</code> : 默认是GET请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'/path/to/file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="comment">// 返回成功后的处理代码	</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>jQuery.post(url, [data], [callback], [type])</code> ： 默认是POST请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(<span class="string">'/path/to/file'</span>, &#123;<span class="attr">param1</span>: <span class="string">'value1'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, xhr</span>) </span>&#123;</div><div class="line">	<span class="comment">// 返回成功后的处理代码	</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>jQuery.getScript(url, [callback])</code> ：GET 请求载入并执行一个 JavaScript 文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getScript(<span class="string">"/path/to/file"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 返回成功后的处理代码	</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><ol>
<li><p><code>each(callback)</code> : 遍历对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">// HTML 代码: --&gt;</span></div><div class="line">&lt;img/&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></div><div class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.src = <span class="string">"test"</span> + i + <span class="string">".jpg"</span>; <span class="comment">// this指向调用着。（原生的dom对象）</span></div><div class="line"> &#125;);</div><div class="line">&lt;!-- <span class="comment">// 结果： --&gt;</span></div><div class="line">&lt;img src=<span class="string">"test0.jpg"</span> /&gt;&lt;img src="test1.jpg" /&gt;&lt;img src="test2.jpg" /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>data([key],[value])</code> : 在一个div上存取数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- <span class="comment">//	HTML 代码: --&gt;</span></div><div class="line">&lt;div data-index=<span class="string">"ye_cs"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;!-- <span class="comment">// jQuery 代码: --&gt;</span></div><div class="line">$(<span class="string">"div"</span>).data(<span class="string">"index"</span>);  <span class="comment">// ye_cs</span></div><div class="line">$(<span class="string">"div"</span>).data(<span class="string">"str"</span>, <span class="string">"hello world"</span>);  <span class="comment">// blah设置为hello</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>jQuery.each(object, [callback])</code> ： 遍历对象。<br> 使用方式同1。</p>
</li>
<li><code>jQuery.type(obj)</code> : 检测obj的数据类型。<ul>
<li>jQuery.type(true)         === “boolean”</li>
<li>jQuery.type(3)            === “number”</li>
<li>jQuery.type(“test”)       === “string”</li>
<li>jQuery.type(function(){}) === “function”</li>
<li>jQuery.type([])           === “array”</li>
<li>jQuery.type(new Date())   === “date”</li>
<li>jQuery.type(/test/)       === “regexp”</li>
</ul>
</li>
<li><p><code>event.preventDefault()</code> ：阻止默认事件行为的触发。</p>
</li>
<li><p><code>serialize()</code> ：序列表表格内容为字符串。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> function </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端JavaScript调试]]></title>
      <url>/20170815/mobile-debuger/</url>
      <content type="html"><![CDATA[<blockquote>
<p>现在移动开发的技术不断成熟，但在移动上面开发调试是很复杂的。遇到些浏览器兼容性问题。且不说解决，能找到问题都是一个很麻烦的事情。<br>此文档适用用于PC端。</p>
</blockquote>
<a id="more"></a>
<h2 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h2><p>目前我已知的调试方式：</p>
<ol>
<li>源码调试。</li>
<li>alert调试。</li>
<li>浏览器的console打印调试（Chrome DevTools、Firebug）</li>
<li>控制台断点调试</li>
<li>Chrome浏览器的ChromeDevTools远程调试</li>
<li>weinre调试</li>
</ol>
<h3 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：不推荐</div><div class="line">调试难度 ：*****</div><div class="line">实用性   ：*</div></pre></td></tr></table></figure>
<p>查看源代码的方式一步一步的去读代码，然后找到错误并修改。<br>这方式不适合我这种菜鸟。对于大神，请随意。我比较喜欢直接看结果的调试方式。</p>
<blockquote>
<p><strong>优点</strong>：可以装x。<br><strong>缺点</strong>：调试时间长，效率低。</p>
</blockquote>
<h3 id="alert调试"><a href="#alert调试" class="headerlink" title="alert调试"></a>alert调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：***</div><div class="line">调试难度 ：****</div><div class="line">实用性   ：**</div></pre></td></tr></table></figure>
<p><code>alert()</code>方法的初衷是为了通过弹窗的方式，来警告或提示用户做对应的操作，并且有强制中断效果。<br>目前对于弹窗已经有许多替代品，而默认的alert常常都是用于调试。在我觉得有错误的位置前后操作。如果有弹窗就说明没问题。否则就出现问题。</p>
<p><strong>例如</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>1_1_alert.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="comment">// 这里有很多很多代码。。。</span></span></div><div class="line"><span class="undefined">		alert(1);</span></div><div class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">'ye_test_1'</span>).innerHTML = <span class="string">"Yexk"</span>;</span></div><div class="line"><span class="undefined">		alert(2);</span></div><div class="line"><span class="javascript">		<span class="comment">// 这里有很多很多代码。。。</span></span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过访问发现，这里只弹出了1，没有弹出2，那就是这两行代码中间出现了问题。<br>去寻找问题，发现了这行代码的意思是找到元素的ID为ye_test_1。但这个文档里面是没有这个元素的，所以报错了。<br>解决办法根据实际开发情况去更改代码就可以了。</p>
<blockquote>
<p>首先找到这段代码自己觉得有问题的地方，然后对这段代码进行前后加上alert()。<br>要是找不出问题在哪也没有关系，可以在一些关键的地方进行加上调试，然后进一步的缩小范围。<br><strong>优点</strong>：效果明显，简单除暴。<br><strong>缺点</strong>：操作麻烦，只能打印基本数据类型（字符串，数字，等）</p>
</blockquote>
<p>个人觉得这个调试虽然这方法简单粗暴，但是有利有弊，并且利小于弊。比如在for循环里面查看里面的执行情况，那就太麻烦了。这个可以根据实际情况酌情选择。</p>
<h3 id="浏览器的console打印调试"><a href="#浏览器的console打印调试" class="headerlink" title="浏览器的console打印调试"></a>浏览器的console打印调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：*****</div><div class="line">调试难度 ：****</div><div class="line">实用性   ：****</div></pre></td></tr></table></figure>
<p>控制台调试工具，目前属于最好用的调试工具，没有有之一。目前常用的：<a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="external">Chrome DevTools</a>（Chrome浏览器自带）、Firebug（需要自行安装）、其他浏览器自带的。<br>调试方法相对文艺，功能强大。可以查看具体的执行位置，报错的位置。<br><strong>例如</strong>：<br>对下面的div进行赋值为”js is so cool!”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>1_2_console.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span></div><div class="line"><span class="javascript">		div.innerHTML = <span class="string">'js is so cool'</span>;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>类似这种错误，通过上面所说的alert方法就调试不出为啥，因为语法没有错误。这里可以通过查看获取的div对象查找原因。<br>代码改成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="built_in">console</span>.log(div);</div><div class="line">div.innerHTML = <span class="string">'js is so cool'</span>;</div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="/20170815/mobile-debuger/1_1_console.png" alt="1_1_console.png" title=""></p>
<p>可以发现获取的div元素是被一个数组给包裹起来了。而对div直接复制相当于给数组添加一个键值对。所以这里要想取得div元素对象，只要在取得div数组里下标为0的元素然后在进行赋值就行了。<br>最后代码改成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="built_in">console</span>.log(div);</div><div class="line">div[<span class="number">0</span>].innerHTML = <span class="string">'js is so cool'</span>;</div></pre></td></tr></table></figure></p>
<p>修改后的结果：<br><img src="/20170815/mobile-debuger/1_2_reult_sconsole.png" alt="1_2_reult_sconsole.png" title=""><br>这里也可以通过语法知识去判断，不过在这里只是为了演示这个console的案例。</p>
<blockquote>
<p>控制台打印已经可满足大部分调试了，基本没有控制台解决不了的问题。如果有，请配合其他调试方式和带上脑子。<br><strong>优点</strong>：效果明显，简单除暴+功能齐全，可以打印任何数据类型，操作简单使用方便。<br><strong>缺点</strong>：打印对象太多了就会展不开对象的信息。</p>
</blockquote>
<p>附录：<a href="other/console_other.md">console对象的其他方法</a></p>
<h3 id="控制台断点调试"><a href="#控制台断点调试" class="headerlink" title="控制台断点调试"></a>控制台断点调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：***</div><div class="line">调试难度 ：****</div><div class="line">实用性   ：**</div></pre></td></tr></table></figure>
<p>有很多时候想知道代码是怎么走的。想看看整个函数是怎么执行的。通过alert弹窗提示和console控制台打印都太麻烦了。而且执行流程还是看的不清晰。在编程领域有个调试方式很好用并且很很简洁明了的，那就是<code>断点调试</code>。<br><br>首先我们来看看控制台的调试界面：<br><img src="/20170815/mobile-debuger/1_3_sources.png" alt="1_3_sources.png" title=""></p>
<ol>
<li><strong>文档树</strong>：显示当前文档引用的文档关系。</li>
<li><strong>源码区</strong>：显示你选择的文件的源码。并且可以查看文件源码，加断点。</li>
<li><strong>监听区</strong>：查看你添加的监听事件或者变量。</li>
</ol>
<p><strong>例如</strong>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> even = <span class="number">0</span>,odd = <span class="number">0</span> ;</span></div><div class="line"><span class="javascript">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span></div><div class="line"><span class="javascript">			<span class="keyword">if</span> (<span class="number">0</span> == i%<span class="number">2</span>) &#123;</span></div><div class="line"><span class="undefined">				even++;</span></div><div class="line"><span class="javascript">			&#125;<span class="keyword">else</span>&#123;</span></div><div class="line"><span class="undefined">				odd++;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined">		&#125;</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里可以在for循环的开始进行打断点调试。<br>步骤：</p>
<ol>
<li>选择需要查看的文件，找对应的代码段。</li>
<li>给想查看的代码段前加上断点。（在行号处单击）</li>
<li>监听想看的的变量。选中-&gt;右键-&gt;Add selected text to watches</li>
<li>刷新页面，js代码会停止在断点的位置。</li>
<li>点击监听窗口的下一步（或者按F11）。</li>
<li>根据业务逻辑查看代码的走向，看看是否正确。然后在做对应的修复。</li>
</ol>
<blockquote>
<p>打上断点后再次单击就是取消断点。</p>
</blockquote>
<p>结果：<br><img src="/20170815/mobile-debuger/1_4_point.gif" alt="1_4_point.gif" title=""></p>
<p>通过断点，监听了三个变量，我们可以看到详细的代码执行流程和变量的赋值情况。</p>
<blockquote>
<p>断点调试，虽然好用，但总觉得有点大材小用。</p>
<p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：当引用了jQuery的DOM操作的时候调试起来比较鸡肋。</p>
</blockquote>
<h3 id="Chrome-DevTools远程调试"><a href="#Chrome-DevTools远程调试" class="headerlink" title="Chrome DevTools远程调试"></a>Chrome DevTools远程调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：**</div><div class="line">调试难度 ：**</div><div class="line">实用性   ：**</div></pre></td></tr></table></figure>
<p>移动开发最头痛的是调试，想要看看手机端里面的页面有什么问题。</p>
<blockquote>
<p>调试前提</p>
</blockquote>
<ol>
<li>必须在PC端和移动端都配置安装好chrome浏览器。</li>
<li>必须用数据线与电脑连接。</li>
</ol>
<blockquote>
<p>这个有点像chrome里面的移动设备模式。调试模式基本差不多。</p>
</blockquote>
<p>调试步骤：</p>
<ol>
<li>在PC和Android手机都装好chrome浏览器。</li>
<li>手机连接到PC，并且装好驱动。打开开发者权限-USB调试功能。<img src="/20170815/mobile-debuger/android_use.png" alt="android_use.png" title=""></li>
<li>在手机端的chrome浏览器访问需要调试的页面。</li>
<li>在PC端的chrome浏览器输入：<code>chrome://inspect</code>。<img src="/20170815/mobile-debuger/chrome_inspect.png" alt="chrome_inspect.png" title=""></li>
<li>点击“inspect”,就会弹出控制台。<img src="/20170815/mobile-debuger/chrome_usb_debuger.png" alt="chrome_usb_debuger.png" title="">
<blockquote>
<p>图中的手机是真机设备。并不是浏览器自带的。当PC浏览器在调试的时候手机界面也会跟着动。实现同步。</p>
</blockquote>
</li>
</ol>
<p>调试演示：<br><img src="/20170815/mobile-debuger/chrome_demo.gif" alt="chrome_demo.gif" title=""></p>
<blockquote>
<p>接下来就可以和浏览器的控制台一样自行调试了。</p>
<p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：需要真机。</p>
</blockquote>
<h3 id="weinre调试"><a href="#weinre调试" class="headerlink" title="weinre调试"></a>weinre调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">推荐指数 ：*</div><div class="line">调试难度 ：*</div><div class="line">实用性   ：*</div></pre></td></tr></table></figure>
<p>上述所说的问题有一定的局限性。必须是PC和手机都有chrome浏览器，然后需要数据线连接。这样并不方便调试兼容性且麻烦。</p>
<blockquote>
<p>Weinre(WebInspector Remote)是一款基于Web Inspector(Webkit)的远程调试工具，借助于网络，可以在PC上直接调试运行在移动设备上的远程页面，中文意思是远程Web检查器，有了Weinre，在PC上可以即时修改目标网页的HTML/CSS/JavaScript，调试过程可实时显示移动设备上页面的预览效果，并同步显示设备页面的错误和警告信息，可以查看网络资源的信息，不过weinre不支持断点调试</p>
</blockquote>
<p><strong>安装前提：</strong><br><span style="color:#f0f">需要<code>nodejs</code>环境。安装node教程请自行度娘。占位飞机：<a href="../nodejs/nodejs_install.md">nodejs教程</a></span></p>
<p><strong>安装weinre</strong><br><code>npm -g install weinre</code>  //安装weinre<br><img src="/20170815/mobile-debuger/weinre_install.png" alt="weinre_install.png" title=""></p>
<blockquote>
<p>这里我使用了淘宝镜像（cnpm）。</p>
</blockquote>
<p><strong>启动</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 语法: weinre --boundHost [hostname | ip address |-all-]  --httpPort [port]  //启动weinre</div><div class="line">	weinre --boundHost -all-  --httpPort 8080</div></pre></td></tr></table></figure></p>
<img src="/20170815/mobile-debuger/weinre_start.png" alt="weinre_start.png" title="">
<p>通过浏览器（推荐使用PC端）访问就应该可以看到这个界面。<br><img src="/20170815/mobile-debuger/weinre_page.png" alt="weinre_page.png" title=""></p>
<p>启动来之后需要配置后才能使用。在需要调试的代码中添加一个脚本文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://192.168.10.24:8080/target/target-script-min.js#anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 把IP地址换成局域网上的ip，端口改成刚刚启动时候配置的。 --&gt;</span></div></pre></td></tr></table></figure></p>
<p>点击“Access Points”下的那个连接：<code>http://127.0.0.1:8080/client/#anonymous</code><br>可以看到这个界面：<br><img src="/20170815/mobile-debuger/weinre_connect_success.png" alt="weinre_connect_success.png" title=""></p>
<blockquote>
<p>如果targets显示none就代表没配置成功或者没有打开配置好需要调试的页面。如果显示绿色表示已经监听到事件页面了。</p>
</blockquote>
<p>所有的配置以及完成了。接下来就看看效果。<br><img src="/20170815/mobile-debuger/weinre_demo.gif" alt="weinre_demo.gif" title=""></p>
<blockquote>
<p>接下来就可以拥有调试里面的样式等等。不过这个功能配置相对麻烦。。一般都不会使用。</p>
<p><strong>优点</strong>：调试过程非常明了，效果明显且效率高。<br><strong>缺点</strong>：配置比较麻烦，并且调试没有浏览器自带的控制台利索，不怎么好用。 </p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>我个人一般而且强力推第三种，浏览器控制台够用了。<br>正所谓调试页面的方法千千万，找到合适自己的就好。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端调试 </tag>
            
            <tag> console </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bower 快速入门]]></title>
      <url>/20170815/bower-get-start/</url>
      <content type="html"><![CDATA[<h2 id="What-is-bower-什么是bower？"><a href="#What-is-bower-什么是bower？" class="headerlink" title="What is bower?(什么是bower？)"></a>What is bower?(什么是bower？)</h2><p>Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。使用前提，需要按照node.js。并且使用npm包管理来安装bower。</p>
<p>命令：<code>npm install -g bower</code> </p>
<blockquote>
<p>PS:</p>
<ul>
<li>NPM：NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。 </li>
<li>这行命令是Bower的全局安装，-g 操作表示全局。 </li>
</ul>
</blockquote>
<h2 id="How-to-use-怎么使用？"><a href="#How-to-use-怎么使用？" class="headerlink" title="How to use?(怎么使用？)"></a>How to use?(怎么使用？)</h2><p>命令：<code>bower install &lt;packgage&gt;</code></p>
<blockquote>
<p>eg. <code>bower install jquery</code><br>上述命令完成以后，你会在你刚才创建的目录下看到一个bower_components的文件夹。里面有jQuery文件。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">	$(function()&#123;</span></div><div class="line"><span class="undefined">		alert(1);</span></div><div class="line"><span class="undefined">	&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他命令：</p>
<ul>
<li>包搜索：<code>bower search jquery</code></li>
<li>包信息：<code>bower info jquery</code></li>
<li>所有包：<code>bower list</code></li>
<li>包卸载：<code>bower uninstall jquery</code></li>
</ul>
<h2 id="bower-json文件的作用"><a href="#bower-json文件的作用" class="headerlink" title="bower.json文件的作用"></a>bower.json文件的作用</h2><blockquote>
<p>有待科普</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>表示放弃使用。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bower </tag>
            
            <tag> nodejs </tag>
            
            <tag> 自动化工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对比Laravel5.4 和ThinkPHP5 的区别]]></title>
      <url>/20170815/%E5%AF%B9%E6%AF%94Laravel5-4-%E5%92%8CThinkPHP5-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="对比Laravel5-4-和ThinkPHP5-的区别"><a href="#对比Laravel5-4-和ThinkPHP5-的区别" class="headerlink" title="对比Laravel5.4 和ThinkPHP5 的区别"></a>对比Laravel5.4 和ThinkPHP5 的区别</h1><h2 id="两者相同部分"><a href="#两者相同部分" class="headerlink" title="两者相同部分"></a>两者相同部分</h2><ol>
<li>使用的<code>public/index.php</code>作为项目入口。</li>
<li>使用了<code>MVC设计思想</code>。</li>
<li>url都使用了<code>PATHINFO模式</code>。</li>
<li><code>命令行模式</code>。</li>
<li>支持分布式数据库设计。</li>
<li>支持路由模式</li>
<li>支持表单验证机制。</li>
<li>支持缓存</li>
<li>支持错误和日志记录</li>
<li>支持<code>Mysql</code>、<code>SqlServer</code>、<code>PgSQL</code>、<code>Sqlite</code>数据库</li>
<li>资源控制器(RESTful)</li>
<li>数据库迁移（migration）</li>
<li>支持模型关联，链式操作</li>
<li>监听SQL</li>
<li>支持多语言</li>
<li>支持redis<br>xx. …(目前只发现了这么多，后续有在再补充)</li>
</ol>
<a id="more"></a>
<p><strong>流程图</strong><br><img src="/20170815/对比Laravel5-4-和ThinkPHP5-的区别/laravel5.4.png" alt="laravel" title="laravel"><br><img src="/20170815/对比Laravel5-4-和ThinkPHP5-的区别/tp5.png" alt="tp5" title="tp5"></p>
<blockquote>
<p>两者在使用和搭建上大致相同，通过相同的入口文件。类似的配置文件。和差不多的操作。</p>
</blockquote>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="Laravel5-4"><a href="#Laravel5-4" class="headerlink" title="Laravel5.4"></a>Laravel5.4</h3><ul>
<li>服务容器<blockquote>
<p>Laravel 务容器是管理类依赖和运行依赖注入的有力工具。依赖注入是一个花俏的名词，它实质上是指：类的依赖通过构造器或在某些情况下通过「setter」方法进行「注入」。</p>
</blockquote>
</li>
<li>服务提供者<blockquote>
</blockquote>
</li>
<li>Facades</li>
<li>Contracts<blockquote>
</blockquote>
</li>
<li>中间件<blockquote>
<p>Laravel 中间件提供了一种方便的机制来过滤进入应用的 HTTP 请求。</p>
</blockquote>
</li>
<li>CSRF 保护</li>
<li>Blade 模板</li>
<li>Laravel Mix</li>
<li>广播系统</li>
<li>集合</li>
<li>事件系统</li>
<li>消息通知</li>
<li>队列</li>
<li>任务调度</li>
</ul>
<h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h3><ul>
<li>前置操作</li>
<li>行为（Behavior）</li>
<li>分页实现</li>
</ul>
<blockquote>
<p>详细的对比内容后续补充。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> thinkphp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css基本入门]]></title>
      <url>/20170815/css%E5%9F%BA%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="CSS基本入门"><a href="#CSS基本入门" class="headerlink" title="CSS基本入门"></a>CSS基本入门</h1><p><strong>基本语法：</strong> <code>选择器{属性名:值;}</code></p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>常用的选择器：</p>
<ol>
<li>元素选择<code>p{color:red}</code></li>
<li>ID选择器<code>#ID{color:red}</code></li>
<li>CLASS类选择器<code>.class{color:red}</code></li>
<li>后代选择器<code>div p{color:red}</code></li>
</ol>
<h2 id="常用的样式"><a href="#常用的样式" class="headerlink" title="常用的样式"></a>常用的样式</h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ol>
<li>背景颜色(background-color)</li>
<li>背景颜色(background-image)</li>
<li><p>背景颜色(background-position)</p>
<blockquote>
<p>简写形式 <code>body {background:#ffffff url(&#39;img_tree.png&#39;) no-repeat right top;}</code></p>
</blockquote>
</li>
</ol>
<h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ol>
<li>文本颜色(color)</li>
<li>对齐方式(text-align)</li>
<li>文本修饰(text-decoration)</li>
<li>字体大小(font-size)</li>
<li>文本修饰(font-family)</li>
</ol>
<h4 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h4><ol>
<li>内边距(padding)</li>
<li>外边距(margin)</li>
</ol>
<h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>1、边框</p>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ol>
<li>静态定位（static）</li>
<li>相对定位（relative）</li>
<li>绝对定位（absolute）</li>
<li>固定定位（fixed）</li>
</ol>
<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><ol>
<li>左浮动</li>
<li>右浮动</li>
<li>清除浮动</li>
</ol>
<h4 id="伪类元素"><a href="#伪类元素" class="headerlink" title="伪类元素"></a>伪类元素</h4><h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p>样式的引用方式:</p>
<ul>
<li>外部样式表（<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code>）</li>
<li>内部样式表（<code>&lt;style&gt;p{color:red}&lt;/style&gt;</code>）</li>
<li>(X)导入样式（<code>&lt;style type=&quot;text/css&quot;&gt; @import &quot;style.css&quot;&lt;/style&gt;</code>）</li>
<li>内联(行内)样式（<code>&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt;</code>）</li>
</ul>
<blockquote>
<p><strong>样式权重问题：</strong><br>浏览器缺省设置 -&gt; 外部样式表 -&gt; 内部样式表（位于 <head> 标签内部） -&gt; 内联样式（在 HTML 元素内部）。<br>标签选择器 -&gt; 类选择器 -&gt; ID选择器 </head></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中获取文件扩展名的N种方法]]></title>
      <url>/20170815/PHP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="PHP中获取文件扩展名的N种方法"><a href="#PHP中获取文件扩展名的N种方法" class="headerlink" title="PHP中获取文件扩展名的N种方法"></a>PHP中获取文件扩展名的N种方法</h2><p>从网上收罗的，基本上就以下这几种方式：</p>
<h4 id="第1种方法："><a href="#第1种方法：" class="headerlink" title="第1种方法："></a>第1种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> substr(strrchr($file, <span class="string">'.'</span>), <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第2种方法："><a href="#第2种方法：" class="headerlink" title="第2种方法："></a>第2种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> substr($file, strrpos($file, <span class="string">'.'</span>)+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第3种方法："><a href="#第3种方法：" class="headerlink" title="第3种方法："></a>第3种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	$info = explode(<span class="string">'.'</span>, $file);</div><div class="line">	<span class="keyword">return</span> end($info);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第4种方法："><a href="#第4种方法：" class="headerlink" title="第4种方法："></a>第4种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	$info = pathinfo($file);</div><div class="line">	<span class="keyword">return</span> $info[<span class="string">'extension'</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第5种方法："><a href="#第5种方法：" class="headerlink" title="第5种方法："></a>第5种方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_extension</span><span class="params">($file)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">return</span> pathinfo($file, PATHINFO_EXTENSION);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>大概看了下上面的几种情况。你会喜欢用几种呢？</p>
</blockquote>
<p>接下来就开始测试一下各种刁钻的问题。</p>
<ul>
<li>路径1. /home/test  </li>
<li>路径2. /init.d/test  </li>
<li>路径3. test.tar.gz  </li>
</ul>
<p>对应这四个情况。发现使用路径1去测试方法4，出现警告：<code>Undefined index: extension</code>。<br>使用路径2去测试方法1,方法2,方法3，都出现了取错后缀的问题。<br>方法5基本能应对上面的路径1和路径2。但还有一个问题。那就是遇到tar.gz这样的后缀的时候还是会有问题。<br>所以路径3的后缀是tar.gz，使用以上几种的方式都不能正确的取得后缀名，这个还是需要自己写一个判断或者限定。</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git命令行秘钥创建]]></title>
      <url>/20170815/git%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A7%98%E9%92%A5%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ol>
<li>打开 <code>Git Bash.</code> 命令行。</li>
<li><p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>将邮箱换成你的邮箱，一直按回车就好了。</p>
</blockquote>
</li>
<li><p>最后会在用户目录下生成 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code> 文件</p>
</li>
<li><p>在GitHub页面上的个人设置里面找到<code>SSH and GPG keys</code><br>然后点击 <code>New SSH key</code><br>把刚刚创建的 <code>id_rsa.pub</code> 文件的内容添加到里面去。保存。</p>
</li>
<li><p>最终大工搞成。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
